@page "/create-item"
@using Inventory.Backend.Abstraction
@inject IItemsOperations _itemsOperations

<h4>Create New Item</h4>

<EditForm class="row g-3" Model="@InputModel" OnSubmit="@Handle">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <ProductLookup></ProductLookup>

    <div class="col-md-3">
        <label for="itemCategoryInput" class="form-label">Category</label>
        <InputSelect class="form-control" id="itemCategoryInput" @bind-Value="@InputModel.Category">
            <option value="Food">Food</option>
            <option value="Clothing">Clothing</option>
            <option value="Hygiene">Hygiene</option>
        </InputSelect>

        <label for="itemWeight" class="form-label">Weight</label>
        <InputNumber class="form-control" id="itemWeight" @bind-Value="@InputModel.Weight"></InputNumber>

        <label for="itemWeightUnit" class="form-label">Unit</label>
        <InputSelect class="form-control" id="itemWeightUnit" @bind-Value="@InputModel.WeightUnit">
            <option value="g">g</option>
            <option value="kg">kg</option>
            <option value="mL">mL</option>
            <option value="L">L</option>
        </InputSelect>
    </div>

    <div class="col-12">
        <label for="itemNameInput" class="form-label">Name</label>
        <InputText class="form-control" id="itemNameInput" @bind-Value="@InputModel.Name" />
    </div>

    <div class="col-12">
        <label for="itemDescriptionInput" class="form-label">Description</label>
        <InputTextArea class="form-control" id="itemDescriptionInput" @bind-Value="@InputModel.Description" />
    </div>

    <div class="col-12">
        <label for="notesInput" class="form-label">Notes</label>
        <InputTextArea class="form-control" id="notesInput" @bind-Value="@InputModel.Notes" />
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@code {
    private CreateItemModel InputModel = new();

    private async Task SearchBarCode()
    {
        var result = await _itemsOperations.BarCodeLookup(InputModel.BarCode);
        if (result != null && result.Products?.Count >= 1)
        {
            var product = result.Products.First();
            InputModel.Name = product.Title;
            InputModel.Description = product.Description;
            InputModel.Notes = product.Category;
            if (decimal.TryParse(product.Weight, out var weightValue))
            {
                InputModel.Weight = weightValue;
            }
            if (product.Images?.Count > 0)
            {
                InputModel.Notes += $"\n{string.Join("\n", product.Images)}";
            }
        }
    }

    public void Handle()
    {
        _itemsOperations.CreateItem(new Backend.Data.Entities.ItemEntity
            {
                Name = InputModel.Name,
                Description = InputModel.Description,
                Notes = InputModel.Notes,
                BarCode = InputModel.BarCode,
                Weight = InputModel.Weight,
                WeightUnit = InputModel.WeightUnit,
                Category = InputModel.Category
            });
    }
}
